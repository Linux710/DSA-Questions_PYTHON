# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        """
        Validate that a binary tree satisfies strict BST ordering:
        every node value lies strictly between inherited (lower, upper) bounds.
        """

        def dfs(node, lower, upper):
            # Empty subtree is valid
            if node is None:
                return True

            v = node.val
            # Violation of current allowable interval
            if not (lower < v < upper):
                return False

            # Left subtree: upper limit shrinks to current value

            if not dfs(node.left, lower, v):
                return False

            # Right subtree: lower bound rises to current value
            if not dfs(node.right, v, upper):
                return False

            return True

        return dfs(root, float('-inf'), float('inf'))
